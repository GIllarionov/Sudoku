import unittest
from Sudoku_generator import transposing, line_swap, line_area_swap, checking, randomize_grid, crossed, crossedlc, lonely


class MyTestCase(unittest.TestCase):
    def test_1(self):
        self.assertEqual(transposing([[1, 2],[3, 4]]), [[1, 3], [2, 4]])

    def test_2(self):
        self.assertEqual(transposing([[1, 2, 3], [4, 5, 6], [7, 8, 9]]), [[1, 4, 7], [2, 5, 8], [3, 6, 9]])

    def test_3(self):
        self.assertEqual(transposing([[5, 6, 4, 9, 1, 8, 3, 2, 7], [2, 3, 1, 4, 7, 5, 8, 9, 6], [7, 8, 9, 3, 2, 6, 1, 4, 5], [9, 4, 2, 5, 3, 7, 6, 8, 1], [3, 1, 8, 6, 4, 9, 5, 7, 2], [6, 7, 5, 1, 8, 2, 9, 3, 4], [4, 5, 3, 2, 9, 1, 7, 6, 8], [1, 2, 7, 8, 6, 3, 4, 5, 9], [8, 9, 6, 7, 5, 4, 2, 1, 3]]),
                         [[5, 2, 7, 9, 3, 6, 4, 1, 8], [6, 3, 8, 4, 1, 7, 5, 2, 9], [4, 1, 9, 2, 8, 5, 3, 7, 6], [9, 4, 3, 5, 6, 1, 2, 8, 7], [1, 7, 2, 3, 4, 8, 9, 6, 5], [8, 5, 6, 7, 9, 2, 1, 3, 4], [3, 8, 1, 6, 5, 9, 7, 4, 2], [2, 9, 4, 8, 7, 3, 6, 5, 1], [7, 6, 5, 1, 2, 4, 8, 9, 3]])

    def test_4(self):
        self.assertEqual(line_swap([[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]], 0, 0, 0), [[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]])

    def test_5(self):
        self.assertEqual(line_swap([[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]], 0, 0, 1), [[2, 3, 4, 1], [1, 2, 3, 4], [3, 4, 1, 2], [4, 1, 2, 3]])

    def test_6(self):
        self.assertEqual(line_swap([[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]], 1, 0, 1), [[1, 2, 3, 4], [2, 3, 4, 1], [4, 1, 2, 3], [3, 4, 1, 2]])

    def test_7(self):
        self.assertEqual(line_swap([[5, 6, 4, 9, 1, 8, 3, 2, 7], [2, 3, 1, 4, 7, 5, 8, 9, 6], [7, 8, 9, 3, 2, 6, 1, 4, 5], [9, 4, 2, 5, 3, 7, 6, 8, 1], [3, 1, 8, 6, 4, 9, 5, 7, 2], [6, 7, 5, 1, 8, 2, 9, 3, 4], [4, 5, 3, 2, 9, 1, 7, 6, 8], [1, 2, 7, 8, 6, 3, 4, 5, 9], [8, 9, 6, 7, 5, 4, 2, 1, 3]], 1, 1, 2),
                         [[5, 6, 4, 9, 1, 8, 3, 2, 7], [2, 3, 1, 4, 7, 5, 8, 9, 6], [7, 8, 9, 3, 2, 6, 1, 4, 5],
                          [9, 4, 2, 5, 3, 7, 6, 8, 1], [6, 7, 5, 1, 8, 2, 9, 3, 4], [3, 1, 8, 6, 4, 9, 5, 7, 2],
                          [4, 5, 3, 2, 9, 1, 7, 6, 8], [1, 2, 7, 8, 6, 3, 4, 5, 9], [8, 9, 6, 7, 5, 4, 2, 1, 3]])
    def test_8(self):
        self.assertEqual(line_area_swap([[5, 6, 4, 9, 1, 8, 3, 2, 7], [2, 3, 1, 4, 7, 5, 8, 9, 6], [7, 8, 9, 3, 2, 6, 1, 4, 5], [9, 4, 2, 5, 3, 7, 6, 8, 1], [3, 1, 8, 6, 4, 9, 5, 7, 2], [6, 7, 5, 1, 8, 2, 9, 3, 4], [4, 5, 3, 2, 9, 1, 7, 6, 8], [1, 2, 7, 8, 6, 3, 4, 5, 9], [8, 9, 6, 7, 5, 4, 2, 1, 3]], 0, 1),
                         [[9, 4, 2, 5, 3, 7, 6, 8, 1], [3, 1, 8, 6, 4, 9, 5, 7, 2], [6, 7, 5, 1, 8, 2, 9, 3, 4], [5, 6, 4, 9, 1, 8, 3, 2, 7], [2, 3, 1, 4, 7, 5, 8, 9, 6], [7, 8, 9, 3, 2, 6, 1, 4, 5], [4, 5, 3, 2, 9, 1, 7, 6, 8], [1, 2, 7, 8, 6, 3, 4, 5, 9], [8, 9, 6, 7, 5, 4, 2, 1, 3]])

    def test_9(self):
        self.assertEqual(line_area_swap([[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]], 1, 0), [[3, 4, 1, 2], [4, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 1]])

    def test_10(self):
        self.assertEqual(line_area_swap([[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]], 0, 0), [[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]])

    def test_11(self):
        self.assertEqual(checking([[1, 2, 3, 4], [2, 3, 4, 1], [3, 4, 1, 2], [4, 1, 2, 3]]), [1, 1, 2])

    def test_12(self):
        self.assertEqual(checking([[1, 2, 3, 4], [3, 4, 1, 2], [2, 3, 4, 1], [4, 1, 2, 3]]), True)

    def test_13(self):
        self.assertEqual(checking([[1, 2, 3, 4], [3, 4, 1, 2], [2, 3, 4, 1], [4, 1, 2, None]]), [3, 3, 3])

    def test_14(self):
        self.assertEqual(checking([[1, 2, 3, 4], [3, 4, 1, None], [2, 3, 4, 1], [4, 1, 2, None]]), [3, 3, 3])

    def test_15(self):
        self.assertEqual(checking( [[5, 6, 4, 9, 1, 8, 3, 2, 7],
                                    [2, 1, 3, 4, 7, 5, 8, 9, 6],
                                    [7, 8, 9, 3, 2, 6, 1, 4, 5],
                                    [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                    [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                    [6, 7, 5, 1, 8, 2, 9, 3, 4],
                                    [4, 5, 3, 2, 9, 1, 7, 6, 8],
                                    [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                    [8, 9, 6, 7, 5, 4, 2, 1, 3]]), [6, 2, 0])

    def test_16(self):
        self.assertEqual(checking( [[5, 6, 4, 9, 1, 8, 3, 2, 7],
                                    [2, 8, 1, 4, 7, 5, 8, 9, 6],
                                    [7, 3, 9, 3, 2, 6, 1, 4, 5],
                                    [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                    [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                    [6, 7, 5, 1, 8, 2, 9, 3, 4],
                                    [4, 5, 3, 2, 9, 1, 7, 6, 8],
                                    [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                    [8, 9, 6, 7, 5, 4, 2, 1, 3]]), [2, 3, 1])

    def test_17(self):
        self.assertEqual(checking(randomize_grid(  [[5, 6, 4, 9, 1, 8, 3, 2, 7],
                                                    [2, 3, 1, 4, 7, 5, 8, 9, 6],
                                                    [7, 8, 9, 3, 2, 6, 1, 4, 5],
                                                    [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                                    [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                                    [6, 7, 5, 1, 8, 2, 9, 3, 4],
                                                    [4, 5, 3, 2, 9, 1, 7, 6, 8],
                                                    [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                                    [8, 9, 6, 7, 5, 4, 2, 1, 3]])), True)

    def test_18(self):
        self.assertEqual(crossed(0, 0, 3, [[5, 6, 4, 9, 1, 8, 3, 2, 7],
                                [2, 3, 1, 4, 7, 5, 8, 9, 6],
                                [7, 8, 9, 3, 2, 6, 1, 4, 5],
                                [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                [6, 7, 5, 1, 8, 2, 9, 3, 4],
                                [4, 5, 3, 2, 9, 1, 7, 6, 8],
                                [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                [8, 9, 6, 7, 5, 4, 2, 1, 3]]), {1, 2, 3, 4, 6, 7, 8, 9})

    def test_19(self):
        self.assertEqual(crossed(0, 0, 3, [[5, 6, 4, 0, 1, 0, 3, 0, 0],
                                [0, 3, 1, 4, 7, 5, 8, 9, 6],
                                [7, 0, 9, 3, 2, 6, 1, 4, 5],
                                [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                [0, 1, 8, 6, 4, 9, 5, 7, 2],
                                [6, 7, 5, 1, 8, 2, 9, 3, 4],
                                [0, 5, 3, 2, 9, 1, 7, 6, 8],
                                [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                [0, 9, 6, 7, 5, 4, 2, 1, 3]]), {1, 3, 4, 6, 7, 9})

    def test_20(self):
        self.assertEqual(crossed(0, 0, 3, [[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                [0, 0, 0, 4, 7, 5, 8, 9, 6],
                                [0, 0, 0, 3, 2, 6, 1, 4, 5],
                                [0, 4, 2, 5, 3, 7, 6, 8, 1],
                                [0, 1, 8, 6, 4, 9, 5, 7, 2],
                                [0, 7, 5, 1, 8, 2, 9, 3, 4],
                                [0, 5, 3, 2, 9, 1, 7, 6, 8],
                                [0, 2, 7, 8, 6, 3, 4, 5, 9],
                                [0, 9, 6, 7, 5, 4, 2, 1, 3]]), set())

    def test_21(self):
        self.assertEqual(crossedlc(0, 0, 3, 6, 7, [[5, 6, 4, 9, 1, 8, 3, 2, 7],
                                [2, 3, 1, 4, 7, 5, 8, 9, 6],
                                [7, 8, 9, 3, 2, 6, 1, 4, 5],
                                [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                [6, 7, 5, 1, 8, 2, 9, 3, 4],
                                [4, 5, 3, 2, 9, 1, 7, 6, 8],
                                [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                [8, 9, 6, 7, 5, 4, 2, 1, 3]]), {1, 2, 3, 4, 5, 6, 7, 8, 9})

    def test_22(self):
        self.assertEqual(crossedlc(1, 2, 3, 6, 7, [[5, 6, 4, 9, 1, 8, 3, 2, 7],
                                [2, 3, 1, 4, 7, 5, 8, 9, 6],
                                [7, 8, 9, 3, 2, 6, 1, 4, 5],
                                [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                [6, 7, 5, 1, 8, 2, 9, 3, 4],
                                [4, 5, 3, 2, 9, 1, 7, 6, 8],
                                [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                [8, 9, 6, 7, 5, 4, 2, 1, 3]]), {1, 2, 3, 4, 5, 6, 7, 8, 9})

    def test_23(self):
        self.assertEqual(crossedlc(1, 2, 3, 6, 7, [[5, 6, 0, 9, 1, 8, 3, 2, 7],
                                [2, 3, 1, 0, 7, 0, 8, 9, 6],
                                [7, 8, 9, 3, 2, 6, 1, 4, 5],
                                [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                [6, 7, 0, 1, 8, 2, 9, 3, 4],
                                [4, 5, 3, 2, 9, 1, 7, 6, 8],
                                [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                [8, 9, 6, 7, 5, 4, 2, 1, 3]]), {1, 2, 3, 6, 7, 8, 9})

    def test_24(self):
        self.assertEqual(crossedlc(1, 2, 3, 1, 1, [[5, 6, 0, 9, 1, 8, 3, 2, 7],
                                [2, 3, 1, 0, 7, 0, 8, 9, 6],
                                [7, 8, 0, 3, 2, 6, 1, 4, 5],
                                [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                [6, 7, 0, 1, 8, 2, 9, 3, 4],
                                [4, 5, 3, 2, 9, 1, 7, 6, 8],
                                [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                [8, 0, 6, 7, 5, 4, 2, 1, 3]]), {1, 2, 3, 6, 7, 8, 9})

    def test_25(self):
        self.assertEqual(crossedlc(1, 2, 3, 1, 1,  [[5, 6, 0, 9, 1, 8, 3, 2, 7],
                                                    [2, 3, 1, 0, 7, 0, 8, 9, 6],
                                                    [7, 8, 0, 3, 2, 6, 1, 4, 5],
                                                    [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                                    [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                                    [6, 7, 0, 1, 8, 2, 9, 3, 4],
                                                    [4, 5, 0, 2, 9, 1, 7, 6, 8],
                                                    [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                                    [8, 0, 6, 7, 5, 4, 2, 1, 3]]), {1, 2, 6, 7, 8, 9})

    def test_26(self):
        self.assertEqual(crossedlc(1, 2, 3, 8, 2,  [[5, 6, 0, 9, 1, 8, 3, 2, 7],
                                                    [2, 3, 1, 0, 7, 0, 8, 9, 0],
                                                    [7, 8, 0, 3, 2, 6, 1, 4, 5],
                                                    [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                                    [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                                    [6, 7, 0, 1, 8, 2, 9, 3, 4],
                                                    [4, 5, 0, 2, 9, 1, 7, 6, 8],
                                                    [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                                    [8, 0, 6, 7, 5, 4, 2, 1, 3]]), {1, 2, 3, 7, 8, 9})

    def test_27(self):
        self.assertEqual(lonely(0, 1, 3,   [[5, 6, 0, 9, 1, 8, 3, 2, 7],
                                            [2, 3, 1, 0, 7, 0, 8, 9, 0],
                                            [7, 8, 0, 3, 2, 6, 1, 4, 5],
                                            [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                            [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                            [6, 7, 0, 1, 8, 2, 9, 3, 4],
                                            [4, 5, 0, 2, 9, 1, 7, 6, 8],
                                            [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                            [8, 0, 6, 7, 5, 4, 2, 1, 3]]), True)

    def test_28(self):
        self.assertEqual(lonely(0, 0, 3,   [[5, 6, 0, 9, 1, 8, 3, 2, 7],
                                            [2, 3, 1, 0, 7, 0, 8, 9, 0],
                                            [7, 8, 0, 3, 2, 6, 1, 4, 5],
                                            [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                            [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                            [6, 7, 0, 1, 8, 2, 9, 3, 4],
                                            [4, 5, 0, 2, 9, 1, 7, 6, 8],
                                            [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                            [8, 0, 6, 7, 5, 4, 2, 1, 3]]), False)

    def test_29(self):
        self.assertEqual(lonely(1, 1, 3,   [[5, 6, 0, 9, 1, 8, 3, 2, 7],
                                            [2, 3, 1, 0, 7, 0, 8, 9, 0],
                                            [7, 8, 0, 3, 2, 6, 1, 4, 5],
                                            [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                            [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                            [6, 7, 0, 1, 8, 2, 9, 3, 4],
                                            [4, 5, 0, 2, 9, 1, 7, 6, 8],
                                            [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                            [8, 0, 6, 7, 5, 4, 2, 1, 3]]), True)

    def test_30(self):
        self.assertEqual(lonely(5, 6, 3,   [[5, 6, 0, 9, 1, 8, 3, 2, 7],
                                            [2, 3, 1, 0, 7, 0, 8, 9, 0],
                                            [7, 8, 0, 3, 2, 6, 1, 4, 5],
                                            [9, 4, 2, 5, 3, 7, 6, 8, 1],
                                            [3, 1, 8, 6, 4, 9, 5, 7, 2],
                                            [6, 7, 0, 1, 8, 2, 9, 3, 4],
                                            [4, 5, 0, 2, 9, 1, 7, 6, 8],
                                            [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                            [8, 0, 6, 7, 5, 4, 2, 1, 3]]), True)

    def test_31(self):
        self.assertEqual(lonely(3, 5, 3,   [[5, 6, 0, 9, 1, 8, 3, 2, 7],
                                            [2, 3, 1, 0, 7, 0, 8, 9, 0],
                                            [7, 8, 0, 3, 2, 6, 1, 4, 5],
                                            [9, 4, 2, 5, 0, 7, 6, 8, 1],
                                            [3, 1, 8, 0, 0, 0, 5, 0, 2],
                                            [6, 7, 0, 1, 0, 2, 9, 3, 4],
                                            [4, 5, 0, 2, 9, 1, 7, 6, 8],
                                            [1, 2, 7, 8, 6, 3, 4, 5, 9],
                                            [8, 0, 6, 0, 5, 4, 2, 1, 3]]), False)
    
if __name__ == '__main__':
    unittest.main()
